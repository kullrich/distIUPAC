% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/abbababa.xyioStats.R
\name{abbababa.xyioStats}
\alias{abbababa.xyioStats}
\title{abbababa.xyioStats}
\usage{
abbababa.xyioStats(tmpSEQ, x.pos, y.pos, i.pos, o.pos, x.freq = 1,
  y.freq = 1, i.freq = 1, o.freq = 1, x.name = "x", y.name = "y",
  i.name = "i", o.name = "o")
}
\arguments{
\item{tmpSEQ}{\code{DNAStringSet} [mandatory]}

\item{x.pos}{population X positions [mandatory]}

\item{y.pos}{population Y positions [mandatory]}

\item{i.pos}{population I positions [mandatory]}

\item{o.pos}{population O positions [mandatory]}

\item{x.freq}{minimal frequency for population X to keep site [default: 1.0]}

\item{y.freq}{minimal frequency for population Y to keep site [default: 1.0]}

\item{i.freq}{minimal frequency for population I to keep site [default: 1.0]}

\item{o.freq}{minimal frequency for population O to keep site [default: 1.0]}

\item{x.name}{population X name [default: "x"]}

\item{y.name}{population Y name [default: "y"]}

\item{i.name}{population I name [default: "i"]}

\item{o.name}{population O name [default: "o"]}
}
\description{
This function calculates ABBA-BABA statistics
comparing two populations (x: receiver; y: donor) with an ingroup
population (i: ingroup) and an outgroup population (o: outgroup).
In a four-taxon scenario (((P1,P2),P3),O) with geneflow from P3>>P2,
the populations should be defined as follows [x:P2 y:P3 i:P1 o:P4].
Accordingly in the four-taxon scenario (((P1,P2),P3),O) with geneflow from
P2>>P3, the populations should be defined as follows [x:P3 y:P2 i:P1 o:P4].
}
\examples{
##Use the 'xyioStats' function to handle population assignment automatically

##load sequence data
data("MySequences", package="distIUPAC")
CAS.pos<-5:34
AFG.pos<-82:87
IRA.pos<-71:78
APO.pos<-1

##Here, one needs to consider the changed x, y and i positions due
##to sub-sampling.
CAS.pos_<-seq_along(CAS.pos)
AFG.pos_<-seq(from=length(CAS.pos_)+1, to=length(c(CAS.pos, AFG.pos)))
IRA.pos_<-seq(from=length(c(CAS.pos, AFG.pos))+1,
to=length(c(CAS.pos, AFG.pos, IRA.pos)))
APO.pos_<-seq(from=length(c(CAS.pos, AFG.pos, IRA.pos))+1,
to=length(c(CAS.pos, AFG.pos, IRA.pos, APO.pos)))

##pairwise deletion
CAS_AFG_IRA_APO.pairwiseDeletion.dist<-distIUPAC(
  as.character(MySequences[c(CAS.pos,AFG.pos,IRA.pos,APO.pos)]))
CAS_AFG_IRA_APO.pairwiseDeletion.xyioStats<-dist.xyioStats(
  CAS_AFG_IRA_APO.pairwiseDeletion.dist, 
  x.pos=CAS.pos_, y.pos=AFG.pos_, i.pos=IRA.pos_, o.pos=APO.pos_,
  x.name="CAS", y.name="AFG", i.name="IRA", o.name="APO")

##global deletion
CAS_AFG_IRA_APO.globalDeletion.dist<-distIUPAC(
  as.character(globalDeletion(MySequences[c(CAS.pos,AFG.pos,
  IRA.pos,APO.pos)])))
CAS_AFG_IRA_APO.globalDeletion.xyioStats<-dist.xyioStats(
  CAS_AFG_IRA_APO.globalDeletion.dist,
  x.pos=CAS.pos_, y.pos=AFG.pos_, i.pos=IRA.pos_, o.pos=APO.pos_,
  x.name="CAS", y.name="AFG", i.name="IRA", o.name="APO")

##compare results
rbind(CAS_AFG_IRA_APO.pairwiseDeletion.xyiStats,
  CAS_AFG_IRA_APO.globalDeletion.xyiStats)
}
\seealso{
\code{\link[distIUPAC]{xyioStats}},
\code{\link[distIUPAC]{diploid2haploid}}
}
\author{
Kristian K Ullrich
}
