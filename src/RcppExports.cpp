// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// distIUPAC
Rcpp::NumericMatrix distIUPAC(Rcpp::StringVector myvector);
RcppExport SEXP _distIUPAC_distIUPAC(SEXP myvectorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::StringVector >::type myvector(myvectorSEXP);
    rcpp_result_gen = Rcpp::wrap(distIUPAC(myvector));
    return rcpp_result_gen;
END_RCPP
}
// distIUPACmatrix
Rcpp::NumericMatrix distIUPACmatrix(Rcpp::StringVector myvector, Rcpp::NumericMatrix scoreMatrix);
RcppExport SEXP _distIUPAC_distIUPACmatrix(SEXP myvectorSEXP, SEXP scoreMatrixSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::StringVector >::type myvector(myvectorSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type scoreMatrix(scoreMatrixSEXP);
    rcpp_result_gen = Rcpp::wrap(distIUPACmatrix(myvector, scoreMatrix));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_distIUPAC_distIUPAC", (DL_FUNC) &_distIUPAC_distIUPAC, 1},
    {"_distIUPAC_distIUPACmatrix", (DL_FUNC) &_distIUPAC_distIUPACmatrix, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_distIUPAC(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
